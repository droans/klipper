[extended_macro SETUP_PRINT]
description: Setup Print
gcode:
    {% set start_vars = printer['extended_macro _CONFIG_PRINT'].print_start %}
    {% set default_vars = printer['extended_macro _CONFIG_PRINT'].defaults %}
    {% set current_vars = printer['extended_macro _CONFIG_PRINT'].current_print %}
    {% set z_height = params.FIRST_LAYER_Z_HEIGHT | default(default_vars.z_height) | float %}
    # _CONFIG_PRINT VAR=current_print KEY=first_layer_height VAL={z_height}
    {% set current_vars = update_dict(current_vars, 'first_layer_height', z_height) %}

    {% set enable_prime = eval(params.PRIME_NOZZLE | default(start_vars.enable_prime_line)) %}
    # _CONFIG_PRINT VAR=current_print KEY=prime_nozzle VAL={enable_prime}
    {% set current_vars = update_dict(current_vars, 'prime_nozzle', enable_prime) %}

    {% set enable_purge = eval(params.PURGE | default(start_vars.purge_nozzle)) %}
    # _CONFIG_PRINT VAR=current_print KEY=purge_nozzle VAL={enable_purge}
    {% set current_vars = update_dict(current_vars, 'purge_nozzle', enable_purge) %}
    {% set nozzle_temp = params.HOTEND | default(default_vars.hotend_temp) | float %}
    {% set current_vars = update_dict(current_vars, 'nozzle_temp', nozzle_temp) %}
 
    {% set bed_temp = params.BED | default(default_vars.bed_temp) | float %}
    {% set current_vars = update_dict(current_vars, 'bed_temp', bed_temp) %}

    {% set enable_mesh = eval(params.ENABLE_MESH | default(default_vars.enable_mesh)) %}
    {% set current_vars = update_dict(current_vars, 'enable_mesh', enable_mesh) %}
    
    {% set mesh_profile = params.MESH_PROFILE | default(default_vars.mesh_profile) %}
    {% set current_vars = update_dict(current_vars, 'mesh_profile', mesh_profile) %}

    {% set generate_mesh = eval(params.GENERATE_MESH | default(default_vars.generate_mesh)) %}
    {% set current_vars = update_dict(current_vars, 'generate_mesh', generate_mesh) %}

    {% set mesh_start = params.MESH_START | default('0,0')  %}
    {% set mesh_end = params.MESH_END | default('0,0')  %}
    {% set current_vars = update_dict(current_vars, 'mesh_start', mesh_start) %}
    {% set current_vars = update_dict(current_vars, 'mesh_end', mesh_end) %}

    {% set total_layers = params.LAYERS | default(0) | int %}
    {% set current_vars = update_dict(current_vars, 'total_layers', total_layers) %}

    M118 {update_gcode_variable('extended_macro _CONFIG_PRINT','current_print', current_vars) }
    {% do update_gcode_variable('extended_macro _CONFIG_PRINT','current_print', current_vars) %}
    M118 Set current print variables
    _SETUP_PRINT


[extended_macro _SETUP_PRINT]
gcode:
    {% set commands = printer['extended_macro _CONFIG_PRINT'].print_setup_commands %}
    {% set ns = namespace(start_in_commands = false) %}
    {% for command in commands %}
        M118 {command}
        {% if (command | lower) == 'start_print'  %}
            {% set ns.start_in_commands = true %}
        {% endif %}
        {command}
    {% endfor %}

    {% if not ns.start_in_commands %}
        M118 Starting Print...
        START_PRINT
    {% endif %}

[extended_macro _PRINT_EVAL_MESH]
gcode:
    {% set vars = printer['extended_macro _CONFIG_PRINT'].current_print %}

    {% set generate_mesh = vars.generate_mesh %}
    M118 Generate Mesh set to {generate_mesh}

    {% set mesh_begin = vars.mesh_start %}
    {% set mesh_end = vars.mesh_end %}
    {% set bed_temp = vars.bed_temp | float %}

    {% set enable_mesh = vars.enable_mesh %}
    {% set mesh_profile = vars.mesh_profile %}

    {% if generate_mesh not in [false, "false","False","FALSE",0,0.0,"0","0.0"] %}
        M118 Calibrating new mesh
        M190 B{bed_temp}
        BED_MESH_CALIBRATE
    {% elif enable_mesh in [true, "true","True","TRUE",1,1.0,"1","1.0"] %}
        {% if (mesh_profile | length ) %}
            M118 Loading mesh {mesh_profile}
            BED_MESH_PROFILE LOAD={mesh_profile}
        {% endif %}
    {% endif %}

[gcode_macro START_PRINT]
gcode:
    {% set commands = printer['extended_macro _CONFIG_PRINT'].print_start_commands %}

    {% for command in commands %}
        {command}
    {% endfor %}