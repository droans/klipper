[gcode_macro TEST_SENSORLESS_HOME]
gcode:

    # Configs
    {% set conf_vars = printer['gcode_macro _CONFIGS']['homing'] %}
    {% set driver_config = printer.configfile.settings %}
    
    # Defaults
    {% set default_log_level = conf_vars.logging_default_log_level %}




    #Params
    {% set current = params.CURRENT | default(d_current) | float %}
    {% set sensitivity = params.SENSITIVITY | float %}
    {% set stepper = params.STEPPER | default(d_stepper) %}
    {% set axis = stepper.split('_')[1] %}

    {% set d_current = conf_vars.axes[axis].current %}
    {% set d_stepper = 'stepper_y' %}
    {% set macro_name = TEST_SENSORLESS_HOME %}

    {% set s_field = conf_vars.axes[axis].tmc_field %}

    {% set driver_start_strings = [
            'tmc'                                                           # Put any strings that the driver config names can start with. 
        ]                                                                   # eg, 'tmc' for 'tmcXXX stepper_XXX'
    %}

    _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=4 MESSAGE="Starting Sensorless test"
    _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=2 MESSAGE="Default log level: {default_log_level}"

    _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=1 MESSAGE="Received conf var keys: {conf_vars.keys()}"

    _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=1 MESSAGE="Received Driver Config Keys: {driver_config.keys()}"
    

    _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=1 MESSAGE="Default Current: {d_current}, Default Stepper: {d_stepper}"
    
    _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=2 MESSAGE="Params Received:"
    {% for key, val in params.items() %}
        _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=2 MESSAGE={key}={val}
    {% endfor %}
    
    #Misc
    _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=1 MESSAGE="Sensorless Sensitivity Field: {s_field}"


    _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=1 MESSAGE="Driver strings start with: {driver_start_strings}"

    {% set conf_ns = namespace(stepper=none, stepper_id=none, drivers=[], keys=[]) %}

    {% for key in driver_config.keys() %}
        _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=1 MESSAGE="Analyzing {key}"

        {% set conf_ns.keys = conf_ns.keys + [key] %}

        {% for d_string in driver_start_strings %}
            _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=1 MESSAGE="Comparing {key} to {d_string}"

            {% set s_length = (d_string | length) %}

            {% if key[:s_length] == d_string %}
                _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=2 MESSAGE="{key} matches pattern for {d_string}"

                {% set conf_ns.drivers = conf_ns.drivers + [key] %}

                _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=2 MESSAGE="Added {key} to driver list"

                {% set c_stepper = key.split(' ')[-1] %}

                _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=2 MESSAGE="Comparing {c_stepper} to {stepper}"

                {% if c_stepper == stepper %}
                    _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=2 MESSAGE="{stepper} matches pattern for {c_stepper}"

                    {% set conf_ns.stepper = c_stepper %}
                    {% set conf_ns.stepper_id = key %}

                    _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=2 MESSAGE="{c_stepper} added as Stepper"
                    _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=2 MESSAGE="{key} added as Stepper ID"
                {% endif %}

            {% endif %}

        {% endfor %}

    {% endfor %}

    {% if conf_ns.stepper is none %}
        _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=4 MESSAGE="Stepper {stepper} not found!"
    {% else %}
        _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=2 MESSAGE="Storing start run current ({start_current}) for {stepper}"
        {% set start_current = driver_config[conf_ns.stepper_id].run_current %}
    
        _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=2 MESSAGE="Setting current to {current} for {stepper}"
        SET_TMC_CURRENT STEPPER={stepper} CURRENT={current}

        _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=2 MESSAGE="Setting sensitivity field {s_field} to {sensitivity} for {stepper}"
        SET_TMC_FIELD STEPPER={stepper} FIELD={s_field} VALUE={sensitivity | int}
        
        _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=4 MESSAGE="Homing"
        G28 {axis}



        _DEBUG_PRINT CALLER={macro_name} LOG_LEVEL=3 MESSAGE="Restoring current to {start_current} for {stepper}"
        SET_TMC_CURRENT STEPPER={stepper} CURRENT={start_current}

        # G28 X Y
        G28 {axis}
        # G90
        # G1 {axis}125 F5000
        # G91

    {% endif %}

[gcode_macro S_H_X]
gcode:
        # Configs
    {% set conf_vars = printer['gcode_macro _CONFIGS'] %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
    

    #Params
    {% set current = params.CURRENT | default(d_current) | float %}
    {% set sensitivity = params.SENSITIVITY | float %}
    {% set stepper = 'stepper_x' %}
    

    {% set start_current = driver_config.run_current %}
    
    SET_TMC_CURRENT STEPPER={stepper} CURRENT={current}

    SET_TMC_FIELD STEPPER={stepper} FIELD=SGTHRS VALUE={sensitivity | int}

    M118 Homing
    G28 X0

    M118 Waiting
    G4 P1000
    
    M118 Second homing
    G28 X

    SET_TMC_CURRENT STEPPER={stepper} CURRENT={start_current}