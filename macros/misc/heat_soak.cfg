[extended_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ## minutes to seconds
    {% set HOME = params.HOME | default(true) %}
    {% set FAN_SPEED = params.FAN | default(10) | int %}
    
    {% if type(HOME) == str %}
        {% set truthy = printer['extended_macro _CONFIG_GLOBAL'].truthy_values %}
        {% set HOME = HOME in truthy %}
    {% endif %}


    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    ;; run the fan to circulate air
    TURN_FILTER_ON SPEED={FAN_SPEED}

    {% if HOME is true %}
        G28
    {% endif %}
    status_heat_soaking
        {% do update_gcode_variable('_CONFIG_POWER','shutdown_enable',false) %}
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[extended_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
        {% do update_gcode_variable('_CONFIG_POWER','shutdown_enable',true) %}
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_extended heat_soaker]
; ## debug
; { action_respond_info( printer['extended_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['extended_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
        
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
            
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
        {% do update_gcode_variable('_CONFIG_POWER','shutdown_enable',true) %}

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                {% set elapsed_m = ((total_time_elapsed / 60) | int) | string %}
                {% set elapsed_s = ((total_time_elapsed % 60) | int) | string %}
                {% if elapsed_s | length == 1 %}
                    {% set elapsed_s = '0' + elapsed_s %}
                {% endif %}
                {% set elapsed_str = elapsed_m + ':' + elapsed_s %}
                M117 Heating ({elapsed_str})
            {% elif stage == "soaking" %}
                {% set elapsed_m = ((soak_time_remaining / 60) | int) | string %}
                {% set elapsed_s = ((soak_time_remaining % 60) | int) | string %}
                {% if elapsed_s | length == 1 %}
                    {% set elapsed_s = '0' + elapsed_s %}
                {% endif %}
                {% set elapsed_str = elapsed_m + ':' + elapsed_s %}

                {% set total_m = (((soak_time_remaining + total_time_elapsed) / 60) | int) | string %}
                {% set total_s = (((soak_time_remaining + total_time_elapsed) % 60) | int) | string %}
                {% if total_s | length == 1 %}
                    {% set total_s = '0' + total_s %}
                {% endif %}
                {% set total_str = total_m + ':' + total_s %}

                M117 Soaking ({elapsed_str}/{total_str})
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}