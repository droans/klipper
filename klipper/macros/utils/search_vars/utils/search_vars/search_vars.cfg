[gcode_macro SEARCH_VARS]
gcode:

    ;##########################################################################################
    ;#########################     SEARCH_VARS     ############################################
    ;##############     Search variables within Klipper     ###################################
    ;##########################     Options:     ##############################################
    ;##########     * OBJECT (str): The object to be searched
    ;##########       As we use helper variables, you must define a new
    ;##########       macro if it is not in the dict below.
    ;##########
    ;##########     * VARS (str): The variables to be passed to the macro
    ;##########       For consistency, please use a comma as a seperator
    ;##########       when drilling into a nested dict.
    ;##########################################################################################
    ;###########################     NOTES     ################################################
    ;##########     * Use _RETURN_SEARCH_VARS to return the values.
    ;##########       It will determine the type of value (one of str/num, dict, or iterable)
    ;##########        and then process it correctly.
    ;##########       See comments on utils/return_variables/utils/return_search_vars/
    ;##########       gcode_macro _RETURN_SEARCH_VARS for more information.
    ;##########
    ;##########     * Use _LOOP_NESTED_DICT DICT={dict} DRILL={drill_items} if drilling into 
    ;##########       a nested dictionary. To retrieve the drilled value, use
    ;##########       printer['gcode_macro _LOOP_NESTED_DICT'].return_value
    ;##########
    ;##########     * Name your helper macro with a leading underscore to keep it hidden.
    ;##########
    ;##########     * All helper macros are to be placed inside utils
    ;##########
    ;##########     * If more than a handful of macros are needed, create
    ;##########       a separate subdirectory for your macro under utils.
    ;##########       The proper structure would be:
    ;##########         search_vars/
    ;##########           utils/
    ;##########             descriptive_macro_name/
    ;##########               base.cfg (Only contains [include utils/*.cfg])
    ;##########               utils/
    ;##########                 descriptive_macro_file_name_1.cfg
    ;##########                 descriptive_macro_file_name_2.cfg
    ;##########                 .....
    ;##########       If only one file is needed- the proper structure would be:
    ;##########         search_vars/
    ;##########           utils/
    ;##########             descriptive_macro_name/
    ;##########               descriptive_macro_name.cfg
    ;##########
    ;##########     * It is up to your macro to determine if VARS is required. If nothing
    ;##########       is passed, VARS will be -1
    ;##########################################################################################

    ;######################################################################
    ;###########################     MACRO     ############################
    ;######################################################################

    #####Define helper macros
    {% set object_macros = {
        'print': '_SEARCH_PRINTER',
        'arg_params': '_SEARCH_ARG_PARAMS'
    }
    %}


    
    {% set obj = params.OBJECT | default(-1) %}
    
    {% set vars = params.VARS | default(-1) %}

    {% if obj == -1 %}
        _MISSING_REQUIRED_ARG ARG=object MACRO_NAME=SEARCH_VARS
    
    {% else %}
        {% set obj = obj | lower %}

        {% set obj_macro = object_macros[obj]  %}

        # {% set obj_macro = "gcode_macro "  + obj_macro %}
        M118 Calling macro {obj_macro}

        # {% set obj_macro = printer[obj_macro] %}

        # M118 Received from printer {obj_macro}
        
        {obj_macro} VARS={vars}
    {% endif %}